// Code generated by protoc-gen-go-data_trans_demo. DO NOT EDIT.
// versions:
// - protoc-gen-go-data_trans_demo v1.2.0
// - protoc             v3.19.4
// source: demo.proto

package data_trans_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCDemoClient is the client API for GRPCDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCDemoClient interface {
	// 一元模式(在一次调用中, 客户端只能向服务器传输一次请求数据, 服务器也只能返回一次响应)
	// unary-unary(In a single call, the client can only send request once, and the server can
	// only respond once.)
	SimpleMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 客户端流模式（在一次调用中, 客户端可以多次向服务器传输数据, 但是服务器只能返回一次响应）
	// stream-unary (In a single call, the client can transfer data to the server several times,
	// but the server can only return a response once.)
	ClientStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_ClientStreamingMethodClient, error)
	// 服务端流模式（在一次调用中, 客户端只能一次向服务器传输数据, 但是服务器可以多次返回响应）
	// unary-stream (In a single call, the client can only transmit data to the server at one time,
	// but the server can return the response many times.)
	ServerStreamingMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (GRPCDemo_ServerStreamingMethodClient, error)
	// 双向流模式 (在一次调用中, 客户端和服务器都可以向对方多次收发数据)
	// stream-stream (In a single call, both client and server can send and receive data
	// to each other multiple times.)
	BidirectionalStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_BidirectionalStreamingMethodClient, error)
}

type gRPCDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCDemoClient(cc grpc.ClientConnInterface) GRPCDemoClient {
	return &gRPCDemoClient{cc}
}

func (c *gRPCDemoClient) SimpleMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/demo.GRPCDemo/SimpleMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCDemoClient) ClientStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_ClientStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCDemo_ServiceDesc.Streams[0], "/demo.GRPCDemo/ClientStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCDemoClientStreamingMethodClient{stream}
	return x, nil
}

type GRPCDemo_ClientStreamingMethodClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type gRPCDemoClientStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *gRPCDemoClientStreamingMethodClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCDemoClientStreamingMethodClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCDemoClient) ServerStreamingMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (GRPCDemo_ServerStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCDemo_ServiceDesc.Streams[1], "/demo.GRPCDemo/ServerStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCDemoServerStreamingMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCDemo_ServerStreamingMethodClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type gRPCDemoServerStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *gRPCDemoServerStreamingMethodClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCDemoClient) BidirectionalStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_BidirectionalStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCDemo_ServiceDesc.Streams[2], "/demo.GRPCDemo/BidirectionalStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCDemoBidirectionalStreamingMethodClient{stream}
	return x, nil
}

type GRPCDemo_BidirectionalStreamingMethodClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type gRPCDemoBidirectionalStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *gRPCDemoBidirectionalStreamingMethodClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCDemoBidirectionalStreamingMethodClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCDemoServer is the server API for GRPCDemo service.
// All implementations must embed UnimplementedGRPCDemoServer
// for forward compatibility
type GRPCDemoServer interface {
	// 一元模式(在一次调用中, 客户端只能向服务器传输一次请求数据, 服务器也只能返回一次响应)
	// unary-unary(In a single call, the client can only send request once, and the server can
	// only respond once.)
	SimpleMethod(context.Context, *Request) (*Response, error)
	// 客户端流模式（在一次调用中, 客户端可以多次向服务器传输数据, 但是服务器只能返回一次响应）
	// stream-unary (In a single call, the client can transfer data to the server several times,
	// but the server can only return a response once.)
	ClientStreamingMethod(GRPCDemo_ClientStreamingMethodServer) error
	// 服务端流模式（在一次调用中, 客户端只能一次向服务器传输数据, 但是服务器可以多次返回响应）
	// unary-stream (In a single call, the client can only transmit data to the server at one time,
	// but the server can return the response many times.)
	ServerStreamingMethod(*Request, GRPCDemo_ServerStreamingMethodServer) error
	// 双向流模式 (在一次调用中, 客户端和服务器都可以向对方多次收发数据)
	// stream-stream (In a single call, both client and server can send and receive data
	// to each other multiple times.)
	BidirectionalStreamingMethod(GRPCDemo_BidirectionalStreamingMethodServer) error
	mustEmbedUnimplementedGRPCDemoServer()
}

// UnimplementedGRPCDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCDemoServer struct {
}

func (UnimplementedGRPCDemoServer) SimpleMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleMethod not implemented")
}
func (UnimplementedGRPCDemoServer) ClientStreamingMethod(GRPCDemo_ClientStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingMethod not implemented")
}
func (UnimplementedGRPCDemoServer) ServerStreamingMethod(*Request, GRPCDemo_ServerStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingMethod not implemented")
}
func (UnimplementedGRPCDemoServer) BidirectionalStreamingMethod(GRPCDemo_BidirectionalStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingMethod not implemented")
}
func (UnimplementedGRPCDemoServer) mustEmbedUnimplementedGRPCDemoServer() {}

// UnsafeGRPCDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCDemoServer will
// result in compilation errors.
type UnsafeGRPCDemoServer interface {
	mustEmbedUnimplementedGRPCDemoServer()
}

func RegisterGRPCDemoServer(s grpc.ServiceRegistrar, srv GRPCDemoServer) {
	s.RegisterService(&GRPCDemo_ServiceDesc, srv)
}

func _GRPCDemo_SimpleMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCDemoServer).SimpleMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.GRPCDemo/SimpleMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCDemoServer).SimpleMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCDemo_ClientStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCDemoServer).ClientStreamingMethod(&gRPCDemoClientStreamingMethodServer{stream})
}

type GRPCDemo_ClientStreamingMethodServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gRPCDemoClientStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *gRPCDemoClientStreamingMethodServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCDemoClientStreamingMethodServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCDemo_ServerStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCDemoServer).ServerStreamingMethod(m, &gRPCDemoServerStreamingMethodServer{stream})
}

type GRPCDemo_ServerStreamingMethodServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type gRPCDemoServerStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *gRPCDemoServerStreamingMethodServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCDemo_BidirectionalStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCDemoServer).BidirectionalStreamingMethod(&gRPCDemoBidirectionalStreamingMethodServer{stream})
}

type GRPCDemo_BidirectionalStreamingMethodServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gRPCDemoBidirectionalStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *gRPCDemoBidirectionalStreamingMethodServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCDemoBidirectionalStreamingMethodServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCDemo_ServiceDesc is the data_trans_demo.ServiceDesc for GRPCDemo service.
// It's only intended for direct use with data_trans_demo.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.GRPCDemo",
	HandlerType: (*GRPCDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleMethod",
			Handler:    _GRPCDemo_SimpleMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamingMethod",
			Handler:       _GRPCDemo_ClientStreamingMethod_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamingMethod",
			Handler:       _GRPCDemo_ServerStreamingMethod_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingMethod",
			Handler:       _GRPCDemo_BidirectionalStreamingMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}
